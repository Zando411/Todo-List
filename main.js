(()=>{"use strict";const e=document.querySelector("[data-lists]"),t=document.querySelector("[data-tasks]"),n=document.getElementById("task-template"),i="task.lists",d="task.selectedListId";let a=JSON.parse(localStorage.getItem(i))||[],l=localStorage.getItem(d);function s(){localStorage.setItem(i,JSON.stringify(a)),localStorage.setItem(d,l)}function r(){s(),o()}function o(){c(e),a.forEach((t=>{const n=document.createElement("div");n.classList.add("lists"),n.dataset.listId=t.id;let i=`\n        <div class="list-item">\n          <h3 class="list-text hover">${t.name}</h3>\n          <i class="fa-solid fa-minus hover fa-lg" style="color: #f8f7f9" data-delete-list-btn></i>\n        </div>\n        `;n.innerHTML=i;const d=n.querySelector(".list-text");t.id===l&&d.classList.add("current"),e.appendChild(n)}));const i=a.find((e=>e.id===l));t.style.display=null==l?"none":"",c(t),function(e){e.tasks.forEach((e=>{const i=document.importNode(n.content,!0),d=i.querySelector("input"),a=i.querySelector("p.name"),l=i.querySelector("p.description"),s=i.querySelector("p.date"),r=i.querySelector("p.priority");d.id=e.id,d.checked=e.complete,a.innerHTML=e.name,l.innerHTML=e.description,s.innerHTML=e.date,r.innerHTML=e.priority,t.appendChild(i)}))}(i)}function c(e){for(;e.firstChild;)e.removeChild(e.firstChild)}document.getElementById("new-list").addEventListener("click",(function(){document.getElementById("list-form").style.display="flex"})),document.getElementById("close-form").addEventListener("click",(function(){let e=document.getElementById("list-form"),t=document.getElementById("list-name");if(""===t.value)return;const n=(i=t.value,{id:Date.now().toString(),name:i,tasks:[]});var i;t.value="",a.push(n),e.style.display="none",r()})),e.addEventListener("click",(e=>{"h3"===e.target.tagName.toLowerCase()&&(l=e.target.parentNode.parentNode.dataset.listId,r())})),e.addEventListener("click",(e=>{if(e.target.hasAttribute("data-delete-list-btn")){e.target.querySelector("i");const t=e.target.parentNode.parentNode.dataset.listId;a=a.filter((e=>e.id!==t)),t===l&&(l=null),r()}})),document.getElementById("add-task").addEventListener("click",(()=>{const e=function(){const e=document.getElementById("name").value,t=document.getElementById("description").value,n=document.getElementById("date").value,i=document.getElementById("priority").value;let d=n.slice(8,10),a=n.slice(5,7),l=n.slice(0,4);a.startsWith("0")&&(a=a.substring(1)),d.startsWith("0")&&(d=d.substring(1));let s=`${a}/${d}/${l}`;if(""!==e&&""!==t&&""!==s&&""!==i)return{name:e,description:t,date:s,priority:i};document.getElementById("error-text").style.display="block"}(),t=(n=e.name,i=e.description,d=e.date,s=e.priority,{id:Date.now().toString(),name:n,description:i,date:d,priority:s,complete:!1});var n,i,d,s;a.find((e=>e.id===l)).tasks.push(t),document.getElementById("name").value="",document.getElementById("description").value="",document.getElementById("date").value="",document.getElementById("priority").value="",r()})),t.addEventListener("click",(e=>{"input"===e.target.tagName.toLowerCase()&&(a.find((e=>e.id===l)).tasks.find((t=>t.id===e.target.id)).complete=e.target.checked,s())})),o()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNQyxFQTRGcEJ0QyxFQUFNMkIsTUFBTWQsR0FBU0EsRUFBS08sS0FBT2YsSUFDekN5QixNQUFNc0IsS0FBS3JCLEdHeEcxQnRDLFNBQVNJLGVBQWUsUUFBUW1ELE1BQVEsR0FDeEN2RCxTQUFTSSxlQUFlLGVBQWVtRCxNQUFRLEdBQy9DdkQsU0FBU0ksZUFBZSxRQUFRbUQsTUFBUSxHQUN4Q3ZELFNBQVNJLGVBQWUsWUFBWW1ELE1BQVEsR0h1RzFDdkMsR0FBZSxJQUtqQmQsRUFBZWtELGlCQUFpQixTQUFVUSxJQUNELFVBQW5DQSxFQUFFQyxPQUFPQyxRQUFRQyxnQkFDRXhELEVBQU0yQixNQUFNZCxHQUFTQSxFQUFLTyxLQUFPZixJQUNwQnlCLE1BQU1ILE1BQ3JDSSxHQUFTQSxFQUFLWCxLQUFPaUMsRUFBRUMsT0FBT2xDLEtBRXBCb0IsU0FBV2EsRUFBRUMsT0FBT2YsUUFDakNqQyxJQUNGLElJL0lKSSxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2xpc3RMb2dpYy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvZGlzcGxheUhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2Zvcm1zLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy90YXNrTG9naWMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNsZWFySW5wdXRzLCBnZXRJbnB1dFZhbHVlcyB9IGZyb20gJy4vdGFza0xvZ2ljJztcblxuY29uc3QgbGlzdHNDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1saXN0c10nKTtcbmNvbnN0IHRhc2tzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtdGFza3NdJyk7XG5jb25zdCB0YXNrVGVtcGxhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFzay10ZW1wbGF0ZScpO1xuXG5jb25zdCBMT0NBTF9TVE9SQUdFX0xJU1RfS0VZID0gJ3Rhc2subGlzdHMnO1xuY29uc3QgTE9DQUxfU1RPUkFHRV9TRUxFQ1RFRF9MSVNUX0lEX0tFWSA9ICd0YXNrLnNlbGVjdGVkTGlzdElkJztcbmxldCBsaXN0cyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oTE9DQUxfU1RPUkFHRV9MSVNUX0tFWSkpIHx8IFtdO1xubGV0IHNlbGVjdGVkTGlzdElkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oTE9DQUxfU1RPUkFHRV9TRUxFQ1RFRF9MSVNUX0lEX0tFWSk7XG5cbmZ1bmN0aW9uIGxpc3RFdmVudExpc3RlbmVyKCkge1xuICBsaXN0c0NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgaWYgKGUudGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2gzJykge1xuICAgICAgc2VsZWN0ZWRMaXN0SWQgPSBlLnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUuZGF0YXNldC5saXN0SWQ7XG4gICAgICBzYXZlQW5kUmVuZGVyKCk7XG4gICAgfVxuICB9KTtcbiAgbGlzdHNDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgIGlmIChlLnRhcmdldC5oYXNBdHRyaWJ1dGUoJ2RhdGEtZGVsZXRlLWxpc3QtYnRuJykpIHtcbiAgICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IGUudGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJ2knKTtcbiAgICAgIGNvbnN0IGlkUGFyZW50ID0gZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLmRhdGFzZXQubGlzdElkO1xuICAgICAgbGlzdHMgPSBsaXN0cy5maWx0ZXIoKGxpc3QpID0+IGxpc3QuaWQgIT09IGlkUGFyZW50KTtcbiAgICAgIGlmIChpZFBhcmVudCA9PT0gc2VsZWN0ZWRMaXN0SWQpIHtcbiAgICAgICAgc2VsZWN0ZWRMaXN0SWQgPSBudWxsO1xuICAgICAgfVxuICAgICAgc2F2ZUFuZFJlbmRlcigpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpc3QobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXG4gICAgbmFtZTogbmFtZSxcbiAgICB0YXNrczogW10sXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRhc2sobmFtZSwgZGVzY3JpcHRpb24sIGRhdGUsIHByaW9yaXR5KSB7XG4gIHJldHVybiB7XG4gICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgICBuYW1lOiBuYW1lLFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICBkYXRlOiBkYXRlLFxuICAgIHByaW9yaXR5OiBwcmlvcml0eSxcbiAgICBjb21wbGV0ZTogZmFsc2UsXG4gIH07XG59XG5cbmZ1bmN0aW9uIHNhdmUoKSB7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKExPQ0FMX1NUT1JBR0VfTElTVF9LRVksIEpTT04uc3RyaW5naWZ5KGxpc3RzKSk7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKExPQ0FMX1NUT1JBR0VfU0VMRUNURURfTElTVF9JRF9LRVksIHNlbGVjdGVkTGlzdElkKTtcbn1cblxuZnVuY3Rpb24gc2F2ZUFuZFJlbmRlcigpIHtcbiAgc2F2ZSgpO1xuICByZW5kZXIoKTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyKCkge1xuICBjbGVhckVsZW1lbnQobGlzdHNDb250YWluZXIpO1xuICByZW5kZXJMaXN0cygpO1xuXG4gIGNvbnN0IHNlbGVjdGVkTGlzdCA9IGxpc3RzLmZpbmQoKGxpc3QpID0+IGxpc3QuaWQgPT09IHNlbGVjdGVkTGlzdElkKTtcbiAgaWYgKHNlbGVjdGVkTGlzdElkID09IG51bGwpIHtcbiAgICB0YXNrc0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9IGVsc2Uge1xuICAgIHRhc2tzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgfVxuICBjbGVhckVsZW1lbnQodGFza3NDb250YWluZXIpO1xuICByZW5kZXJUYXNrcyhzZWxlY3RlZExpc3QpO1xufVxuXG5mdW5jdGlvbiByZW5kZXJUYXNrcyhzZWxlY3RlZExpc3QpIHtcbiAgc2VsZWN0ZWRMaXN0LnRhc2tzLmZvckVhY2goKHRhc2spID0+IHtcbiAgICBjb25zdCB0YXNrRWxlbWVudCA9IGRvY3VtZW50LmltcG9ydE5vZGUodGFza1RlbXBsYXRlLmNvbnRlbnQsIHRydWUpO1xuICAgIGNvbnN0IGNoZWNrYm94ID0gdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgICBjb25zdCBuYW1lID0gdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcigncC5uYW1lJyk7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSB0YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdwLmRlc2NyaXB0aW9uJyk7XG4gICAgY29uc3QgZGF0ZSA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3AuZGF0ZScpO1xuICAgIGNvbnN0IHByaW9yaXR5ID0gdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcigncC5wcmlvcml0eScpO1xuXG4gICAgY2hlY2tib3guaWQgPSB0YXNrLmlkO1xuICAgIGNoZWNrYm94LmNoZWNrZWQgPSB0YXNrLmNvbXBsZXRlO1xuICAgIG5hbWUuaW5uZXJIVE1MID0gdGFzay5uYW1lO1xuICAgIGRlc2NyaXB0aW9uLmlubmVySFRNTCA9IHRhc2suZGVzY3JpcHRpb247XG4gICAgZGF0ZS5pbm5lckhUTUwgPSB0YXNrLmRhdGU7XG4gICAgcHJpb3JpdHkuaW5uZXJIVE1MID0gdGFzay5wcmlvcml0eTtcbiAgICB0YXNrc0NvbnRhaW5lci5hcHBlbmRDaGlsZCh0YXNrRWxlbWVudCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZW5kZXJMaXN0cygpIHtcbiAgbGlzdHMuZm9yRWFjaCgobGlzdCkgPT4ge1xuICAgIGNvbnN0IGxpc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbGlzdEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbGlzdHMnKTtcbiAgICBsaXN0RWxlbWVudC5kYXRhc2V0Lmxpc3RJZCA9IGxpc3QuaWQ7XG4gICAgbGV0IGxpc3RFbGVtZW50SFRNTCA9IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cImxpc3QtaXRlbVwiPlxuICAgICAgICAgIDxoMyBjbGFzcz1cImxpc3QtdGV4dCBob3ZlclwiPiR7bGlzdC5uYW1lfTwvaDM+XG4gICAgICAgICAgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1taW51cyBob3ZlciBmYS1sZ1wiIHN0eWxlPVwiY29sb3I6ICNmOGY3ZjlcIiBkYXRhLWRlbGV0ZS1saXN0LWJ0bj48L2k+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuXG4gICAgbGlzdEVsZW1lbnQuaW5uZXJIVE1MID0gbGlzdEVsZW1lbnRIVE1MO1xuICAgIGNvbnN0IGxpc3ROYW1lID0gbGlzdEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmxpc3QtdGV4dCcpO1xuICAgIGlmIChsaXN0LmlkID09PSBzZWxlY3RlZExpc3RJZCkge1xuICAgICAgbGlzdE5hbWUuY2xhc3NMaXN0LmFkZCgnY3VycmVudCcpO1xuICAgIH1cblxuICAgIGxpc3RzQ29udGFpbmVyLmFwcGVuZENoaWxkKGxpc3RFbGVtZW50KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyRWxlbWVudChlbGVtZW50KSB7XG4gIHdoaWxlIChlbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICBlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGFza0V2ZW50TGlzdGVuZXIoKSB7XG4gIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGQtdGFzaycpO1xuICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgY29uc3QgaW5wdXRWYWx1ZXMgPSBnZXRJbnB1dFZhbHVlcygpO1xuICAgIGNvbnN0IHRhc2sgPSBjcmVhdGVUYXNrKFxuICAgICAgaW5wdXRWYWx1ZXMubmFtZSxcbiAgICAgIGlucHV0VmFsdWVzLmRlc2NyaXB0aW9uLFxuICAgICAgaW5wdXRWYWx1ZXMuZGF0ZSxcbiAgICAgIGlucHV0VmFsdWVzLnByaW9yaXR5XG4gICAgKTtcbiAgICBjb25zdCBzZWxlY3RlZExpc3QgPSBsaXN0cy5maW5kKChsaXN0KSA9PiBsaXN0LmlkID09PSBzZWxlY3RlZExpc3RJZCk7XG4gICAgc2VsZWN0ZWRMaXN0LnRhc2tzLnB1c2godGFzayk7XG4gICAgY2xlYXJJbnB1dHMoKTtcbiAgICBzYXZlQW5kUmVuZGVyKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRDaGVja2JveEV2ZW50TGlzdGVuZXIoKSB7XG4gIHRhc2tzQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICBpZiAoZS50YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnKSB7XG4gICAgICBjb25zdCBzZWxlY3RlZExpc3QgPSBsaXN0cy5maW5kKChsaXN0KSA9PiBsaXN0LmlkID09PSBzZWxlY3RlZExpc3RJZCk7XG4gICAgICBjb25zdCBzZWxlY3RlZFRhc2sgPSBzZWxlY3RlZExpc3QudGFza3MuZmluZChcbiAgICAgICAgKHRhc2spID0+IHRhc2suaWQgPT09IGUudGFyZ2V0LmlkXG4gICAgICApO1xuICAgICAgc2VsZWN0ZWRUYXNrLmNvbXBsZXRlID0gZS50YXJnZXQuY2hlY2tlZDtcbiAgICAgIHNhdmUoKTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQge1xuICByZW5kZXJMaXN0cyxcbiAgY3JlYXRlTGlzdCxcbiAgY3JlYXRlVGFzayxcbiAgbGlzdHMsXG4gIHRhc2tFdmVudExpc3RlbmVyLFxuICBzYXZlQW5kUmVuZGVyLFxuICBsaXN0RXZlbnRMaXN0ZW5lcixcbiAgcmVuZGVyLFxuICBhZGRDaGVja2JveEV2ZW50TGlzdGVuZXIsXG59O1xuIiwiaW1wb3J0IHsgY2xvc2VMaXN0Rm9ybSwgb3Blbkxpc3RGb3JtIH0gZnJvbSAnLi9mb3Jtcyc7XG5pbXBvcnQge1xuICBhZGRDaGVja2JveEV2ZW50TGlzdGVuZXIsXG4gIGxpc3RFdmVudExpc3RlbmVyLFxuICB0YXNrRXZlbnRMaXN0ZW5lcixcbn0gZnJvbSAnLi9saXN0TG9naWMnO1xuXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgY29uc3QgbGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXctbGlzdCcpO1xuICBsaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb3Blbkxpc3RGb3JtKTtcblxuICBjb25zdCBjbG9zZUZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xvc2UtZm9ybScpO1xuICBjbG9zZUZvcm0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZUxpc3RGb3JtKTtcblxuICBsaXN0RXZlbnRMaXN0ZW5lcigpO1xuICB0YXNrRXZlbnRMaXN0ZW5lcigpO1xuICBhZGRDaGVja2JveEV2ZW50TGlzdGVuZXIoKTtcbn1cblxuZXhwb3J0IHsgYWRkRXZlbnRMaXN0ZW5lcnMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUxpc3QsIGxpc3RzLCBzYXZlQW5kUmVuZGVyIH0gZnJvbSAnLi9saXN0TG9naWMnO1xuXG5mdW5jdGlvbiBvcGVuTGlzdEZvcm0oKSB7XG4gIGxldCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpc3QtZm9ybScpO1xuICBmb3JtLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG59XG5cbmZ1bmN0aW9uIGNsb3NlTGlzdEZvcm0oKSB7XG4gIGxldCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpc3QtZm9ybScpO1xuICBsZXQgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGlzdC1uYW1lJyk7XG5cbiAgaWYgKGlucHV0LnZhbHVlID09PSAnJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBuZXdMaXN0TmFtZSA9IGlucHV0LnZhbHVlO1xuXG4gIGNvbnN0IGxpc3QgPSBjcmVhdGVMaXN0KG5ld0xpc3ROYW1lKTtcbiAgaW5wdXQudmFsdWUgPSAnJztcbiAgbGlzdHMucHVzaChsaXN0KTtcbiAgZm9ybS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBzYXZlQW5kUmVuZGVyKCk7XG59XG5cbmV4cG9ydCB7IG9wZW5MaXN0Rm9ybSwgY2xvc2VMaXN0Rm9ybSB9O1xuIiwiZnVuY3Rpb24gZ2V0SW5wdXRWYWx1ZXMoKSB7XG4gIGNvbnN0IG5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZScpLnZhbHVlO1xuICBjb25zdCBkZXNjcmlwdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXNjcmlwdGlvbicpLnZhbHVlO1xuICBjb25zdCBkZWZhdWx0RGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkYXRlJykudmFsdWU7XG4gIGNvbnN0IHByaW9yaXR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW9yaXR5JykudmFsdWU7XG5cbiAgbGV0IGRheSA9IGRlZmF1bHREYXRlLnNsaWNlKDgsIDEwKTtcbiAgbGV0IG1vbnRoID0gZGVmYXVsdERhdGUuc2xpY2UoNSwgNyk7XG4gIGxldCB5ZWFyID0gZGVmYXVsdERhdGUuc2xpY2UoMCwgNCk7XG5cbiAgaWYgKG1vbnRoLnN0YXJ0c1dpdGgoJzAnKSkge1xuICAgIG1vbnRoID0gbW9udGguc3Vic3RyaW5nKDEpO1xuICB9XG4gIGlmIChkYXkuc3RhcnRzV2l0aCgnMCcpKSB7XG4gICAgZGF5ID0gZGF5LnN1YnN0cmluZygxKTtcbiAgfVxuXG4gIGxldCBkYXRlID0gYCR7bW9udGh9LyR7ZGF5fS8ke3llYXJ9YDtcblxuICBpZiAobmFtZSA9PT0gJycgfHwgZGVzY3JpcHRpb24gPT09ICcnIHx8IGRhdGUgPT09ICcnIHx8IHByaW9yaXR5ID09PSAnJykge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlcnJvci10ZXh0Jykuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIHsgbmFtZSwgZGVzY3JpcHRpb24sIGRhdGUsIHByaW9yaXR5IH07XG59XG5cbmZ1bmN0aW9uIGNsZWFySW5wdXRzKCkge1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZScpLnZhbHVlID0gJyc7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXNjcmlwdGlvbicpLnZhbHVlID0gJyc7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkYXRlJykudmFsdWUgPSAnJztcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW9yaXR5JykudmFsdWUgPSAnJztcbn1cblxuZXhwb3J0IHsgZ2V0SW5wdXRWYWx1ZXMsIGNsZWFySW5wdXRzIH07XG4iLCJpbXBvcnQgeyBhZGRFdmVudExpc3RlbmVycywgdXBkYXRlRXZlbnRMaXN0ZW5lcnMgfSBmcm9tICcuL2Rpc3BsYXlIYW5kbGVyJztcbmltcG9ydCB7IHJlbmRlciwgcmVuZGVyTGlzdHMgfSBmcm9tICcuL2xpc3RMb2dpYyc7XG5cbmFkZEV2ZW50TGlzdGVuZXJzKCk7XG5yZW5kZXIoKTtcbiJdLCJuYW1lcyI6WyJsaXN0c0NvbnRhaW5lciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInRhc2tzQ29udGFpbmVyIiwidGFza1RlbXBsYXRlIiwiZ2V0RWxlbWVudEJ5SWQiLCJMT0NBTF9TVE9SQUdFX0xJU1RfS0VZIiwiTE9DQUxfU1RPUkFHRV9TRUxFQ1RFRF9MSVNUX0lEX0tFWSIsImxpc3RzIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNlbGVjdGVkTGlzdElkIiwic2F2ZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJzYXZlQW5kUmVuZGVyIiwicmVuZGVyIiwiY2xlYXJFbGVtZW50IiwiZm9yRWFjaCIsImxpc3QiLCJsaXN0RWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJkYXRhc2V0IiwibGlzdElkIiwiaWQiLCJsaXN0RWxlbWVudEhUTUwiLCJuYW1lIiwiaW5uZXJIVE1MIiwibGlzdE5hbWUiLCJhcHBlbmRDaGlsZCIsInNlbGVjdGVkTGlzdCIsImZpbmQiLCJzdHlsZSIsImRpc3BsYXkiLCJ0YXNrcyIsInRhc2siLCJ0YXNrRWxlbWVudCIsImltcG9ydE5vZGUiLCJjb250ZW50IiwiY2hlY2tib3giLCJkZXNjcmlwdGlvbiIsImRhdGUiLCJwcmlvcml0eSIsImNoZWNrZWQiLCJjb21wbGV0ZSIsInJlbmRlclRhc2tzIiwiZWxlbWVudCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJmb3JtIiwiaW5wdXQiLCJ2YWx1ZSIsIkRhdGUiLCJub3ciLCJ0b1N0cmluZyIsInB1c2giLCJlIiwidGFyZ2V0IiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwicGFyZW50Tm9kZSIsImhhc0F0dHJpYnV0ZSIsImlkUGFyZW50IiwiZmlsdGVyIiwiaW5wdXRWYWx1ZXMiLCJkZWZhdWx0RGF0ZSIsImRheSIsInNsaWNlIiwibW9udGgiLCJ5ZWFyIiwic3RhcnRzV2l0aCIsInN1YnN0cmluZyIsImdldElucHV0VmFsdWVzIl0sInNvdXJjZVJvb3QiOiIifQ==
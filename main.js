(()=>{"use strict";const t=document.querySelector("[data-lists]"),e="task.lists",n="task.selectedListId";let s=JSON.parse(localStorage.getItem(e))||[],i=localStorage.getItem(n);function l(){localStorage.setItem(e,JSON.stringify(s)),localStorage.setItem(n,i),a()}function a(){!function(t){for(;t.firstChild;)t.removeChild(t.firstChild)}(t),s.forEach((e=>{const n=document.createElement("div");n.classList.add("lists"),n.dataset.listId=e.id;let s=`\n        <div class="list-item">\n          <h3 class="list-text hover">${e.name}</h3>\n          <i class="fa-solid fa-minus hover fa-lg" style="color: #f8f7f9" data-delete-list-btn></i>\n        </div>\n        `;n.innerHTML=s;const l=n.querySelector(".list-text");e.id===i&&l.classList.add("current"),t.appendChild(n)}))}function d(t){const e=this.closest(".task-item");this.checked?e.classList.add("completed"):e.classList.remove("completed")}document.getElementById("add-task").addEventListener("click",(()=>{const{name:t,description:e,date:n,priority:s}=function(){const t=document.getElementById("name").value,e=document.getElementById("description").value,n=document.getElementById("date").value,s=document.getElementById("priority").value;let i=n.slice(8,10),l=n.slice(5,7),a=n.slice(0,4);l.startsWith("0")&&(l=l.substring(1)),i.startsWith("0")&&(i=i.substring(1));let d=`${l}/${i}/${a}`;if(""!==t&&""!==e&&""!==d&&""!==s)return{name:t,description:e,date:d,priority:s};document.getElementById("error-text").style.display="block"}();!function(t,e,n,s){const i=document.getElementById("current-tasks"),l=document.createElement("div");l.setAttribute("class","task-item");let a=`\n  <div class="checkbox">\n            <input type="checkbox" name="task" id="Task-1" />\n            <p>${t}</p>\n          </div>\n          <p>\n            ${e}\n          </p>\n          <p>${n}</p>\n          <div class="last-box">\n            <p>${s}</p>\n            <button class="delete-task-btn">Delete</button>`;l.innerHTML=a,i.appendChild(l),l.querySelector('input[type="checkbox"]').addEventListener("change",d)}(t,e,n,s)})),document.querySelectorAll('input[type="checkbox"]').forEach((t=>{t.addEventListener("change",d)})),document.getElementById("new-list").addEventListener("click",(function(){document.getElementById("list-form").style.display="flex"})),document.getElementById("close-form").addEventListener("click",(function(){let t=document.getElementById("list-form"),e=document.getElementById("list-name");if(""===e.value)return;const n=(i=e.value,{id:Date.now().toString(),name:i,tasks:[]});var i;e.value="",s.push(n),t.style.display="none",l()})),t.addEventListener("click",(t=>{"h3"===t.target.tagName.toLowerCase()&&(i=t.target.parentNode.parentNode.dataset.listId,l())})),t.addEventListener("click",(t=>{if(t.target.hasAttribute("data-delete-list-btn")){t.target.querySelector("i");const e=t.target.parentNode.parentNode.dataset.listId;s=s.filter((t=>t.id!==e)),e===i&&(i=null),l()}})),a()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";const e=document.getElementById("task-template");function t(e){const t=this.closest(".task-item");this.checked?t.classList.add("completed"):t.classList.remove("completed")}function n(t,n,i,s,l){t.tasks.forEach((t=>{const d=document.importNode(e.content,!0),o=d.querySelector("input"),a=d.querySelector("p.name"),c=d.querySelector("p.description"),r=d.querySelector("p.date"),m=d.querySelector("p.priority");o.id=t.id,o.checked=t.complete,a.innerHTML=n,c.innerHTML=i,r.innerHTML=s,m.innerHTML=l,taskContainer.appendChild(d)}))}const i=document.querySelector("[data-lists]"),s=document.querySelector("[data-tasks]"),l="task.lists",d="task.selectedListId";let o=JSON.parse(localStorage.getItem(l))||[],a=localStorage.getItem(d);function c(){localStorage.setItem(l,JSON.stringify(o)),localStorage.setItem(d,a),r()}function r(){m(i),o.forEach((e=>{const t=document.createElement("div");t.classList.add("lists"),t.dataset.listId=e.id;let n=`\n        <div class="list-item">\n          <h3 class="list-text hover">${e.name}</h3>\n          <i class="fa-solid fa-minus hover fa-lg" style="color: #f8f7f9" data-delete-list-btn></i>\n        </div>\n        `;t.innerHTML=n;const s=t.querySelector(".list-text");e.id===a&&s.classList.add("current"),i.appendChild(t)})),s.style.display=null==a?"none":"",function(e){e.tasks.filter((e=>!e.complete))}(u),m(s),n()}function m(e){for(;e.firstChild;)e.removeChild(e.firstChild)}const u=o.find((e=>e.id===a));document.getElementById("add-task").addEventListener("click",(()=>{const{name:e,description:t,date:i,priority:s}=function(){const e=document.getElementById("name").value,t=document.getElementById("description").value,n=document.getElementById("date").value,i=document.getElementById("priority").value;let s=n.slice(8,10),l=n.slice(5,7),d=n.slice(0,4);l.startsWith("0")&&(l=l.substring(1)),s.startsWith("0")&&(s=s.substring(1));let o=`${l}/${s}/${d}`;if(""!==e&&""!==t&&""!==o&&""!==i)return{name:e,description:t,date:o,priority:i};document.getElementById("error-text").style.display="block"}();n(selectedList,e,t,i,s)})),document.querySelectorAll('input[type="checkbox"]').forEach((e=>{e.addEventListener("change",t)})),document.getElementById("new-list").addEventListener("click",(function(){document.getElementById("list-form").style.display="flex"})),document.getElementById("close-form").addEventListener("click",(function(){let e=document.getElementById("list-form"),t=document.getElementById("list-name");if(""===t.value)return;const n=(i=t.value,{id:Date.now().toString(),name:i,tasks:[{id:"tessst",name:"Test",description:"this is the description",date:"08/20/2005",priority:"High",complete:!1}]});var i;t.value="",o.push(n),e.style.display="none",c()})),i.addEventListener("click",(e=>{"h3"===e.target.tagName.toLowerCase()&&(a=e.target.parentNode.parentNode.dataset.listId,c())})),i.addEventListener("click",(e=>{if(e.target.hasAttribute("data-delete-list-btn")){e.target.querySelector("i");const t=e.target.parentNode.parentNode.dataset.listId;o=o.filter((e=>e.id!==t)),t===a&&(a=null),c()}})),r()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";const e=document.querySelector("[data-lists]"),t=document.querySelector("[data-tasks]"),n=document.getElementById("task-template"),i="task.lists",d="task.selectedListId";let a=JSON.parse(localStorage.getItem(i))||[],l=localStorage.getItem(d);function s(){localStorage.setItem(i,JSON.stringify(a)),localStorage.setItem(d,l)}function r(){s(),o()}function o(){c(e),a.forEach((t=>{const n=document.createElement("div");n.classList.add("lists"),n.dataset.listId=t.id;let i=`\n        <div class="list-item">\n          <h3 class="list-text hover">${t.name}</h3>\n          <i class="fa-solid fa-minus hover fa-lg" style="color: #f8f7f9" data-delete-list-btn></i>\n        </div>\n        `;n.innerHTML=i;const d=n.querySelector(".list-text");t.id===l&&d.classList.add("current"),e.appendChild(n)}));const i=a.find((e=>e.id===l));t.style.display=null==l?"none":"",c(t),function(e){e.tasks.forEach((e=>{const i=document.importNode(n.content,!0),d=i.querySelector("input"),a=i.querySelector("p.name"),l=i.querySelector("p.description"),s=i.querySelector("p.date"),r=i.querySelector("p.priority"),o=i.querySelector(".task-item");i.querySelector(".delete-task-btn").id="btn"+e.id,o.id=e.id,d.id="chk"+e.id,d.checked=e.complete,a.innerHTML=e.name,l.innerHTML=e.description,s.innerHTML=e.date,r.innerHTML=e.priority,t.appendChild(i)}))}(i)}function c(e){for(;e.firstChild;)e.removeChild(e.firstChild)}document.getElementById("new-list").addEventListener("click",(function(){document.getElementById("list-form").style.display="flex"})),document.getElementById("close-form").addEventListener("click",(function(){let e=document.getElementById("list-form"),t=document.getElementById("list-name");if(""===t.value)return;const n=(i=t.value,{id:Date.now().toString(),name:i,tasks:[]});var i;t.value="",a.push(n),e.style.display="none",r()})),e.addEventListener("click",(e=>{"h3"===e.target.tagName.toLowerCase()&&(l=e.target.parentNode.parentNode.dataset.listId,r())})),e.addEventListener("click",(e=>{if(e.target.hasAttribute("data-delete-list-btn")){e.target.querySelector("i");const t=e.target.parentNode.parentNode.dataset.listId;a=a.filter((e=>e.id!==t)),t===l&&(l=null),r()}})),document.getElementById("add-task").addEventListener("click",(()=>{const e=function(){const e=document.getElementById("name").value,t=document.getElementById("description").value,n=document.getElementById("date").value,i=document.getElementById("priority").value;let d=n.slice(8,10),a=n.slice(5,7),l=n.slice(0,4);a.startsWith("0")&&(a=a.substring(1)),d.startsWith("0")&&(d=d.substring(1));let s=`${a}/${d}/${l}`;if(""!==e&&""!==t&&""!==s&&""!==i)return{name:e,description:t,date:s,priority:i};document.getElementById("error-text").style.display="block"}(),t=(n=e.name,i=e.description,d=e.date,s=e.priority,{id:Date.now().toString(),name:n,description:i,date:d,priority:s,complete:!1});var n,i,d,s;a.find((e=>e.id===l)).tasks.push(t),document.getElementById("name").value="",document.getElementById("description").value="",document.getElementById("date").value="",document.getElementById("priority").value="",r()})),t.addEventListener("click",(e=>{"input"===e.target.tagName.toLowerCase()&&(a.find((e=>e.id===l)).tasks.find((t=>"chk"+t.id===e.target.id)).complete=e.target.checked,s())})),o()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,